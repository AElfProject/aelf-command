import fs from 'fs';
import path from 'path';
import Registry from '../../src/rc/index';
import { userHomeDir } from '../../src/utils/userHomeDir';
import { endpoint, account, password, dataDir } from '../constants.js';

jest.mock('../../src/utils/userHomeDir', () => {
  const path = require('path');
  return {
    userHomeDir: path.resolve(__dirname)
  };
});

describe('Registry', () => {
  afterEach(() => {
    jest.clearAllMocks();
    delete process.env.AELF_CLI_ENDPOINT;
  });
  afterAll(() => {
    fs.unlinkSync(path.resolve(userHomeDir, 'aelf/.aelfrc'));
    fs.rmdirSync(path.resolve(userHomeDir, 'aelf'));
  });
  test('should get file or not', () => {
    const result = Registry.getFileOrNot(path.resolve(__dirname, '../dataDir/aelf/.aelfrc'));
    expect(result).toBe(`# THIS IS AN AUTOGENERATED FILE FOR AELF-COMMAND OPTIONS. DO NOT EDIT THIS FILE DIRECTLY.



endpoint https://tdvw-test-node.aelf.io/
`);
  });
  test('should load config', () => {
    const result = Registry.loadConfig();
    expect(result).toEqual({});
  });
  test('should get config from env', () => {
    // mock
    process.env.AELF_CLI_ENDPOINT = 'http://localhost:1234';
    const result = Registry.getConfigFromEnv();
    expect(result).toEqual({ endpoint: 'http://localhost:1234' });
  });
  test('should stringify', () => {
    const result = Registry.stringify();
    expect(result).toEqual([
      '# THIS IS AN AUTOGENERATED FILE FOR AELF-COMMAND OPTIONS. DO NOT EDIT THIS FILE DIRECTLY.',
      '',
      '',
      ''
    ]);
  });
  test('should get and set options correctly', () => {
    const registry = new Registry();
    registry.setOption('endpoint', endpoint);
    expect(registry.getOption('endpoint')).toBe(endpoint);
  });
  test('should save options to file', () => {
    const registry = new Registry();
    registry.saveOption('endpoint', endpoint);
    expect(fs.readFileSync(registry.globalConfigLoc).toString()).toContain(`endpoint ${endpoint}`);
  });
  test('should delete config key from file', () => {
    const registry = new Registry();
    registry.saveOption('endpoint', endpoint);
    registry.deleteConfig('endpoint');
    expect(fs.readFileSync(registry.globalConfigLoc).toString()).not.toContain(`endpoint ${endpoint}`);
  });
  test('should get file configs correctly', () => {
    const registry = new Registry();
    registry.saveOption('endpoint', endpoint);
    const fileConfigs = registry.getFileConfigs();
    expect(fileConfigs.endpoint).toBe(endpoint);
  });
  test('should get configs correctly', () => {
    const registry = new Registry();
    registry.saveOption('endpoint', endpoint);
    const configs = registry.getConfigs();
    expect(configs.endpoint).toBe(endpoint);
  });
});
